New Features in Java 1.8:

1. Lambda expression − Adds functional processing capability to Java.
2. Method references − Referencing functions by their names instead of invoking them directly. Using functions as parameter.
3. Default method − Interface to have default method implementation.
4. New tools − New compiler tools and utilities are added like ‘jdeps’ to figure out dependencies.
5. Stream API − New stream API to facilitate pipeline processing.
6. Date Time API − Improved date time API.
7. Optional − Emphasis on best practices to handle null values properly.
8. Nashorn, JavaScript Engine − A Java-based engine to execute JavaScript code.

--------------------------------------------------------------------------------------------
LAMDA EXPRESSION:

https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html

"There are no runtime benefits of using lambda expressions, so I will use it cautiously because I don’t mind writing few extra lines of code." 
SEE: https://www.journaldev.com/2389/java-8-features-with-examples#java8-collection
https://www.tutorialspoint.com/java8/java8_lambda_expressions.htm
https://www.baeldung.com/java-8-new-features

--------------------------------------------------------------------------------------------
Method Reference:
https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html
---------------------------------------------------------------------------------------------
STREAM:

https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html
https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html
https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html
https://www.baeldung.com/java-8-streams
https://www.baeldung.com/java-groupingby-collector

An attempt to reuse a stream after calling the terminal operation will trigger the IllegalStateException.
Streams are lazy; computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed.

https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html
The combiner is necessary in parallel reductions. We only call combiner in a parallel mode to reduce the results of accumulators from different threads.
---------------------------------------------------------------------------------------------
OPTIONAL:

https://www.oracle.com/technical-resources/articles/java/java8-optional.html
https://www.baeldung.com/java-optional

---------------------------------------------------------------------------------------------
Interface default methods:

https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html
https://docs.oracle.com/javase/tutorial/java/IandI/override.html

Note: Static methods in interfaces are never inherited.

