Watch Java Brains.
Especially JWT and OAuth part.
Note: The WebSecurityConfigurerAdapter is deprecated. Instead beans needs to registered(for example SecurityFilterChain).
Please check https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter
-------------------------------------------------------
JWT is an authorization(and not authentication) mechanism, ie after the user has been authenticated using a proper authentication mechanism(example authentication using username/password where the repository of username/password maybe in-memory, database, ldap etc) a jwt token(similar to session token) is handed to the user as an authorization token which can be used in further calls to the server.
-------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html#oauth2-overview
-------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html#oauth2-client-access-protected-resources-current-user
Unlike the previous example, notice that we do not need to tell Spring Security about the clientRegistrationId we’d like to use. This is because it can be derived from the currently logged in user.

this.restClient.get()
				.uri("http://localhost:8090/messages")
				.attributes(clientRegistrationId("my-oauth2-client"))
				.retrieve()
				.body(Message[].class);
Here "clientRegistrationId" is used to tell restclient which client credentials to use to fetch the access token as there can be multiple client credentials configured in a spring boot app.
----------------------------------------------------------
If using Spring Boot with no additional customizations, we can actually omit the SecurityFilterChain bean entirely.
----------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/oauth2/client/core.html#oauth2Client-client-registration
This link has useful explanation of the client-registration object params.
----------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/oauth2/client/authorized-clients.html#oauth2-client-rest-client
"If an existing OAuth2AccessToken is expired, it is refreshed (or renewed)"

"The following example uses the default OAuth2AuthorizedClientManager to configure a RestClient capable of accessing protected resources by placing Bearer tokens in the Authorization header of each request"

In authorization code flow,
1) The resource owner authenticates to the authorization server.
2) The authorization server sends an authorization code to the client.
3) The client uses this auth code and sends it back, alongwith its client credentials(ie client id and secret), to the authorization server. In this way client authenticates itself.
4) The authorization server then returns an access token to the client, which the client uses for accessing a protected resource in resource server.

In Implicit Flow,
The third step is omitted, hence bypassing the need for client verification. Hence it is unsecure.

In Client credentials flow,
The client directly requests access token from the authorization server with its client credentials. Since the client is the owner of the resource being requested.
--------------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/oauth2/client/authorized-clients.html#oauth2-client-rest-client-registration-id
--------------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/oauth2/login/core.html#oauth2login-common-oauth2-provider
CommonOAuth2Provider pre-defines a set of default client properties for a number of well known providers: Google, GitHub, Facebook, and Okta.
For example, the authorization-uri, token-uri, and user-info-uri do not change often for a provider. Therefore, it makes sense to provide default values, to reduce the required configuration.
As demonstrated previously, when we configured a Google client, only the client-id and client-secret properties are required.
---------------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html
By default, Spring Security requires that every request be authenticated. That said, any time you use an HttpSecurity instance, it’s necessary to declare your authorization rules.
Whenever you have an HttpSecurity instance, you should at least do:
http.authorizeHttpRequests((authorize) -> authorize.anyRequest().authenticated())
----------------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html#authorizing-endpoints
AuthorizationFilter processes these pairs in the order listed, applying only the first match to the request.
@Bean
public SecurityFilterChain web(HttpSecurity http) throws Exception {
    http
        .authorizeHttpRequests((authorize) -> authorize
	    .requestMatchers("/endpoint").hasAuthority("USER")
            .anyRequest().authenticated()
        )
        // ...

    return http.build();
}
The way to read the above rules is "if the request is /endpoint, then require the USER authority; else, only require authentication".
-----------------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html#match-requests
Spring Security supports two languages for URI pattern-matching: Ant (as seen above) and Regular Expressions.
You can also match rules by HTTP method. One place where this is handy is when authorizing by permissions granted, like being granted a read or write privilege.
http
    .authorizeHttpRequests((authorize) -> authorize
        .requestMatchers(HttpMethod.GET).hasAuthority("read")
        .requestMatchers(HttpMethod.POST).hasAuthority("write")
        .anyRequest().denyAll()
    )
-----------------------------------------------------------------
https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html#authorize-requests
-----------------------------------------------------------------
https://www.baeldung.com/spring-security-oauth-resource-server
If we need to start it independently, then we can supply the jwk-set-uri property instead to point to the authorization server’s endpoint exposing public keys:

https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#_startup_expectations
Check the flow of how resource server works. Also check about "provider configuration".

-----------------------------------------------------------------
Sample projects for spring security:
https://github.com/spring-projects/spring-security-samples