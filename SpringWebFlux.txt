Check "Reactive programming with java" - java brains tutorial (Project Reactor) first to get the idea of what reactive programming paradigm is.
Check Tutorial#22.
----------------------------------------------------------------------------------------------------------
https://docs.spring.io/spring-framework/reference/web/webflux/new-framework.html
The key expected benefit of reactive and non-blocking is the ability to scale with a small, fixed number of threads and less memory.

In Spring MVC (and servlet applications in general), it is assumed that applications can block the current thread, (for example, for remote calls). For this reason, servlet containers use a large thread pool to absorb potential blocking during request handling.
In Spring WebFlux (and non-blocking servers in general), it is assumed that applications do not block. Therefore, non-blocking servers use a small, fixed-size thread pool (event loop workers) to handle requests.